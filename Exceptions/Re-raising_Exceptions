Exceptions can not be ignored
    error codes are easy to ignore
    checks are always required: test the input arguments before performing work on them
    the pythonic way is not to use return codes (some number), but to use "raise" (re-raising exceptions)



Re-raising exceptions:

    from math import log
    def string_log(s):
        v = convert(s)
        return log(v)

    >>> print(string_log("one two three".split()))
    4.812184355372417

    >>> print(string_log("bla".split()))
    Conversion error: KeyError('bla')
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
      File "<stdin>", line 3, in string_log
    ValueError: math domain error

    def convert(s):
    try:
        number = ''
        for token in s:
            number += DIGIT_MAP[token]
        return int(number)
    except (KeyError, TypeError) as e:
        print(f"Conversion error: {e!r}",
              file=sys.stderr)
        raise

    >>> print(string_log("bla".split()))
    Conversion error: KeyError('bla')
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
      File "<stdin>", line 2, in string_log
      File "<stdin>", line 5, in convert
    KeyError: 'bla'

